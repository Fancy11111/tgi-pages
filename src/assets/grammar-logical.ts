/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* start := logicalExpression
* logicalTrue := text='True' | text='true' | text='T' | text='t' | text='1' | text='W' | text='w'
*                .value = boolean { return true; }
* logicalFalse := 'False' | 'false' | 'F' | 'f' | '0'
*                 .value = boolean { return false; }
* logicalData := value=logicalTrue | value=logicalFalse
* logicalNot := 'NOT' | 'Not' | 'not' | '!'
*               .value = String { return 'not'; }
* logicalUnaryOperator := logicalNot
* logicalImplies := 'IMPLIES' | 'Implies' | 'implies' | '=>'
*                   .value = String { return 'implies'; }
* logicalAnd := 'AND' | 'And' | 'and' | '&' | '&&'
*               .value = String { return 'and'; }
* logicalOr := 'OR' | 'Or' | 'or' | '|' | '||'
*              .value = String { return 'or'; }
* logicalXor := 'XOR' | 'Xor' | 'xor' | '^'
*               .value = String { return 'xor'; }
* logicalNand := 'NAND' | 'Nand' | 'nand' | '!&' | '!&&'
*                .value = String { return 'nand'; }
* logicalNor := 'NOR' | 'Nor' | 'nor' | '!|' | '!||'
*               .value = String { return 'nor'; }
* logicalEquals := 'EQUALS' | 'Equals' | 'equals' | '=' | '==' | '<==>' | '<=>'
*                  .value = String { return 'equals'; }
* logicalBinaryOperator := logicalImplies | logicalAnd | logicalOr | logicalXor | logicalNand | logicalNor | logicalEquals
* logicalExpression := left=logicalData operator=logicalBinaryOperator right=logicalData | operator=logicalUnaryOperator right=logicalData | logicalData
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    logicalTrue_1 = "logicalTrue_1",
    logicalTrue_2 = "logicalTrue_2",
    logicalTrue_3 = "logicalTrue_3",
    logicalTrue_4 = "logicalTrue_4",
    logicalTrue_5 = "logicalTrue_5",
    logicalTrue_6 = "logicalTrue_6",
    logicalTrue_7 = "logicalTrue_7",
    logicalFalse_1 = "logicalFalse_1",
    logicalFalse_2 = "logicalFalse_2",
    logicalFalse_3 = "logicalFalse_3",
    logicalFalse_4 = "logicalFalse_4",
    logicalFalse_5 = "logicalFalse_5",
    logicalData_1 = "logicalData_1",
    logicalData_2 = "logicalData_2",
    logicalNot_1 = "logicalNot_1",
    logicalNot_2 = "logicalNot_2",
    logicalNot_3 = "logicalNot_3",
    logicalNot_4 = "logicalNot_4",
    logicalUnaryOperator = "logicalUnaryOperator",
    logicalImplies_1 = "logicalImplies_1",
    logicalImplies_2 = "logicalImplies_2",
    logicalImplies_3 = "logicalImplies_3",
    logicalImplies_4 = "logicalImplies_4",
    logicalAnd_1 = "logicalAnd_1",
    logicalAnd_2 = "logicalAnd_2",
    logicalAnd_3 = "logicalAnd_3",
    logicalAnd_4 = "logicalAnd_4",
    logicalAnd_5 = "logicalAnd_5",
    logicalOr_1 = "logicalOr_1",
    logicalOr_2 = "logicalOr_2",
    logicalOr_3 = "logicalOr_3",
    logicalOr_4 = "logicalOr_4",
    logicalOr_5 = "logicalOr_5",
    logicalXor_1 = "logicalXor_1",
    logicalXor_2 = "logicalXor_2",
    logicalXor_3 = "logicalXor_3",
    logicalXor_4 = "logicalXor_4",
    logicalNand_1 = "logicalNand_1",
    logicalNand_2 = "logicalNand_2",
    logicalNand_3 = "logicalNand_3",
    logicalNand_4 = "logicalNand_4",
    logicalNand_5 = "logicalNand_5",
    logicalNor_1 = "logicalNor_1",
    logicalNor_2 = "logicalNor_2",
    logicalNor_3 = "logicalNor_3",
    logicalNor_4 = "logicalNor_4",
    logicalNor_5 = "logicalNor_5",
    logicalEquals_1 = "logicalEquals_1",
    logicalEquals_2 = "logicalEquals_2",
    logicalEquals_3 = "logicalEquals_3",
    logicalEquals_4 = "logicalEquals_4",
    logicalEquals_5 = "logicalEquals_5",
    logicalEquals_6 = "logicalEquals_6",
    logicalEquals_7 = "logicalEquals_7",
    logicalBinaryOperator_1 = "logicalBinaryOperator_1",
    logicalBinaryOperator_2 = "logicalBinaryOperator_2",
    logicalBinaryOperator_3 = "logicalBinaryOperator_3",
    logicalBinaryOperator_4 = "logicalBinaryOperator_4",
    logicalBinaryOperator_5 = "logicalBinaryOperator_5",
    logicalBinaryOperator_6 = "logicalBinaryOperator_6",
    logicalBinaryOperator_7 = "logicalBinaryOperator_7",
    logicalExpression_1 = "logicalExpression_1",
    logicalExpression_2 = "logicalExpression_2",
    logicalExpression_3 = "logicalExpression_3",
}
export type start = logicalExpression;
export type logicalTrue = logicalTrue_1 | logicalTrue_2 | logicalTrue_3 | logicalTrue_4 | logicalTrue_5 | logicalTrue_6 | logicalTrue_7;
export interface logicalTrue_1 {
    kind: ASTKinds.logicalTrue_1;
    text: string;
}
export interface logicalTrue_2 {
    kind: ASTKinds.logicalTrue_2;
    text: string;
}
export interface logicalTrue_3 {
    kind: ASTKinds.logicalTrue_3;
    text: string;
}
export interface logicalTrue_4 {
    kind: ASTKinds.logicalTrue_4;
    text: string;
}
export interface logicalTrue_5 {
    kind: ASTKinds.logicalTrue_5;
    text: string;
}
export interface logicalTrue_6 {
    kind: ASTKinds.logicalTrue_6;
    text: string;
}
export class logicalTrue_7 {
    public kind: ASTKinds.logicalTrue_7 = ASTKinds.logicalTrue_7;
    public text: string;
    public value: boolean;
    constructor(text: string){
        this.text = text;
        this.value = ((): boolean => {
        return true;
        })();
    }
}
export type logicalFalse = logicalFalse_1 | logicalFalse_2 | logicalFalse_3 | logicalFalse_4 | logicalFalse_5;
export type logicalFalse_1 = string;
export type logicalFalse_2 = string;
export type logicalFalse_3 = string;
export type logicalFalse_4 = string;
export class logicalFalse_5 {
    public kind: ASTKinds.logicalFalse_5 = ASTKinds.logicalFalse_5;
    public value: boolean;
    constructor(){
        this.value = ((): boolean => {
        return false;
        })();
    }
}
export type logicalData = logicalData_1 | logicalData_2;
export interface logicalData_1 {
    kind: ASTKinds.logicalData_1;
    value: logicalTrue;
}
export interface logicalData_2 {
    kind: ASTKinds.logicalData_2;
    value: logicalFalse;
}
export type logicalNot = logicalNot_1 | logicalNot_2 | logicalNot_3 | logicalNot_4;
export type logicalNot_1 = string;
export type logicalNot_2 = string;
export type logicalNot_3 = string;
export class logicalNot_4 {
    public kind: ASTKinds.logicalNot_4 = ASTKinds.logicalNot_4;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'not';
        })();
    }
}
export type logicalUnaryOperator = logicalNot;
export type logicalImplies = logicalImplies_1 | logicalImplies_2 | logicalImplies_3 | logicalImplies_4;
export type logicalImplies_1 = string;
export type logicalImplies_2 = string;
export type logicalImplies_3 = string;
export class logicalImplies_4 {
    public kind: ASTKinds.logicalImplies_4 = ASTKinds.logicalImplies_4;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'implies';
        })();
    }
}
export type logicalAnd = logicalAnd_1 | logicalAnd_2 | logicalAnd_3 | logicalAnd_4 | logicalAnd_5;
export type logicalAnd_1 = string;
export type logicalAnd_2 = string;
export type logicalAnd_3 = string;
export type logicalAnd_4 = string;
export class logicalAnd_5 {
    public kind: ASTKinds.logicalAnd_5 = ASTKinds.logicalAnd_5;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'and';
        })();
    }
}
export type logicalOr = logicalOr_1 | logicalOr_2 | logicalOr_3 | logicalOr_4 | logicalOr_5;
export type logicalOr_1 = string;
export type logicalOr_2 = string;
export type logicalOr_3 = string;
export type logicalOr_4 = string;
export class logicalOr_5 {
    public kind: ASTKinds.logicalOr_5 = ASTKinds.logicalOr_5;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'or';
        })();
    }
}
export type logicalXor = logicalXor_1 | logicalXor_2 | logicalXor_3 | logicalXor_4;
export type logicalXor_1 = string;
export type logicalXor_2 = string;
export type logicalXor_3 = string;
export class logicalXor_4 {
    public kind: ASTKinds.logicalXor_4 = ASTKinds.logicalXor_4;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'xor';
        })();
    }
}
export type logicalNand = logicalNand_1 | logicalNand_2 | logicalNand_3 | logicalNand_4 | logicalNand_5;
export type logicalNand_1 = string;
export type logicalNand_2 = string;
export type logicalNand_3 = string;
export type logicalNand_4 = string;
export class logicalNand_5 {
    public kind: ASTKinds.logicalNand_5 = ASTKinds.logicalNand_5;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'nand';
        })();
    }
}
export type logicalNor = logicalNor_1 | logicalNor_2 | logicalNor_3 | logicalNor_4 | logicalNor_5;
export type logicalNor_1 = string;
export type logicalNor_2 = string;
export type logicalNor_3 = string;
export type logicalNor_4 = string;
export class logicalNor_5 {
    public kind: ASTKinds.logicalNor_5 = ASTKinds.logicalNor_5;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'nor';
        })();
    }
}
export type logicalEquals = logicalEquals_1 | logicalEquals_2 | logicalEquals_3 | logicalEquals_4 | logicalEquals_5 | logicalEquals_6 | logicalEquals_7;
export type logicalEquals_1 = string;
export type logicalEquals_2 = string;
export type logicalEquals_3 = string;
export type logicalEquals_4 = string;
export type logicalEquals_5 = string;
export type logicalEquals_6 = string;
export class logicalEquals_7 {
    public kind: ASTKinds.logicalEquals_7 = ASTKinds.logicalEquals_7;
    public value: String;
    constructor(){
        this.value = ((): String => {
        return 'equals';
        })();
    }
}
export type logicalBinaryOperator = logicalBinaryOperator_1 | logicalBinaryOperator_2 | logicalBinaryOperator_3 | logicalBinaryOperator_4 | logicalBinaryOperator_5 | logicalBinaryOperator_6 | logicalBinaryOperator_7;
export type logicalBinaryOperator_1 = logicalImplies;
export type logicalBinaryOperator_2 = logicalAnd;
export type logicalBinaryOperator_3 = logicalOr;
export type logicalBinaryOperator_4 = logicalXor;
export type logicalBinaryOperator_5 = logicalNand;
export type logicalBinaryOperator_6 = logicalNor;
export type logicalBinaryOperator_7 = logicalEquals;
export type logicalExpression = logicalExpression_1 | logicalExpression_2 | logicalExpression_3;
export interface logicalExpression_1 {
    kind: ASTKinds.logicalExpression_1;
    left: logicalData;
    operator: logicalBinaryOperator;
    right: logicalData;
}
export interface logicalExpression_2 {
    kind: ASTKinds.logicalExpression_2;
    operator: logicalUnaryOperator;
    right: logicalData;
}
export type logicalExpression_3 = logicalData;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchstart($$dpth: number, $$cr?: ContextRecorder): Nullable<start> {
        return this.matchlogicalExpression($$dpth + 1, $$cr);
    }
    public matchlogicalTrue($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue> {
        return this.choice<logicalTrue>([
            () => this.matchlogicalTrue_1($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_2($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_3($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_4($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_5($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_6($$dpth + 1, $$cr),
            () => this.matchlogicalTrue_7($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalTrue_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_1> {
        return this.runner<logicalTrue_1>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_1");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_1> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:True)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_1, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_2> {
        return this.runner<logicalTrue_2>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_2");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_2> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_2, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_3> {
        return this.runner<logicalTrue_3>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_3");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_3> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:T)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_3, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_4> {
        return this.runner<logicalTrue_4>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_4");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_4> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_4, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_5> {
        return this.runner<logicalTrue_5>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_5");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_5> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:1)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_5, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_6($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_6> {
        return this.runner<logicalTrue_6>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_6");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_6> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:W)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalTrue_6, text: $scope$text};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalTrue_7($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalTrue_7> {
        return this.runner<logicalTrue_7>($$dpth,
            (log) => {
                if (log) {
                    log("logicalTrue_7");
                }
                let $scope$text: Nullable<string>;
                let $$res: Nullable<logicalTrue_7> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new logicalTrue_7($scope$text);
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalFalse($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse> {
        return this.choice<logicalFalse>([
            () => this.matchlogicalFalse_1($$dpth + 1, $$cr),
            () => this.matchlogicalFalse_2($$dpth + 1, $$cr),
            () => this.matchlogicalFalse_3($$dpth + 1, $$cr),
            () => this.matchlogicalFalse_4($$dpth + 1, $$cr),
            () => this.matchlogicalFalse_5($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalFalse_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse_1> {
        return this.regexAccept(String.raw`(?:False)`, $$dpth + 1, $$cr);
    }
    public matchlogicalFalse_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse_2> {
        return this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr);
    }
    public matchlogicalFalse_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse_3> {
        return this.regexAccept(String.raw`(?:F)`, $$dpth + 1, $$cr);
    }
    public matchlogicalFalse_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse_4> {
        return this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr);
    }
    public matchlogicalFalse_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalFalse_5> {
        return this.regexAccept(String.raw`(?:0)`, $$dpth + 1, $$cr);
    }
    public matchlogicalData($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalData> {
        return this.choice<logicalData>([
            () => this.matchlogicalData_1($$dpth + 1, $$cr),
            () => this.matchlogicalData_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalData_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalData_1> {
        return this.runner<logicalData_1>($$dpth,
            (log) => {
                if (log) {
                    log("logicalData_1");
                }
                let $scope$value: Nullable<logicalTrue>;
                let $$res: Nullable<logicalData_1> = null;
                if (true
                    && ($scope$value = this.matchlogicalTrue($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalData_1, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalData_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalData_2> {
        return this.runner<logicalData_2>($$dpth,
            (log) => {
                if (log) {
                    log("logicalData_2");
                }
                let $scope$value: Nullable<logicalFalse>;
                let $$res: Nullable<logicalData_2> = null;
                if (true
                    && ($scope$value = this.matchlogicalFalse($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalData_2, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalNot($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNot> {
        return this.choice<logicalNot>([
            () => this.matchlogicalNot_1($$dpth + 1, $$cr),
            () => this.matchlogicalNot_2($$dpth + 1, $$cr),
            () => this.matchlogicalNot_3($$dpth + 1, $$cr),
            () => this.matchlogicalNot_4($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalNot_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNot_1> {
        return this.regexAccept(String.raw`(?:NOT)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNot_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNot_2> {
        return this.regexAccept(String.raw`(?:Not)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNot_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNot_3> {
        return this.regexAccept(String.raw`(?:not)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNot_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNot_4> {
        return this.regexAccept(String.raw`(?:!)`, $$dpth + 1, $$cr);
    }
    public matchlogicalUnaryOperator($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalUnaryOperator> {
        return this.matchlogicalNot($$dpth + 1, $$cr);
    }
    public matchlogicalImplies($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalImplies> {
        return this.choice<logicalImplies>([
            () => this.matchlogicalImplies_1($$dpth + 1, $$cr),
            () => this.matchlogicalImplies_2($$dpth + 1, $$cr),
            () => this.matchlogicalImplies_3($$dpth + 1, $$cr),
            () => this.matchlogicalImplies_4($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalImplies_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalImplies_1> {
        return this.regexAccept(String.raw`(?:IMPLIES)`, $$dpth + 1, $$cr);
    }
    public matchlogicalImplies_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalImplies_2> {
        return this.regexAccept(String.raw`(?:Implies)`, $$dpth + 1, $$cr);
    }
    public matchlogicalImplies_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalImplies_3> {
        return this.regexAccept(String.raw`(?:implies)`, $$dpth + 1, $$cr);
    }
    public matchlogicalImplies_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalImplies_4> {
        return this.regexAccept(String.raw`(?:=>)`, $$dpth + 1, $$cr);
    }
    public matchlogicalAnd($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd> {
        return this.choice<logicalAnd>([
            () => this.matchlogicalAnd_1($$dpth + 1, $$cr),
            () => this.matchlogicalAnd_2($$dpth + 1, $$cr),
            () => this.matchlogicalAnd_3($$dpth + 1, $$cr),
            () => this.matchlogicalAnd_4($$dpth + 1, $$cr),
            () => this.matchlogicalAnd_5($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalAnd_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd_1> {
        return this.regexAccept(String.raw`(?:AND)`, $$dpth + 1, $$cr);
    }
    public matchlogicalAnd_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd_2> {
        return this.regexAccept(String.raw`(?:And)`, $$dpth + 1, $$cr);
    }
    public matchlogicalAnd_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd_3> {
        return this.regexAccept(String.raw`(?:and)`, $$dpth + 1, $$cr);
    }
    public matchlogicalAnd_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd_4> {
        return this.regexAccept(String.raw`(?:&)`, $$dpth + 1, $$cr);
    }
    public matchlogicalAnd_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalAnd_5> {
        return this.regexAccept(String.raw`(?:&&)`, $$dpth + 1, $$cr);
    }
    public matchlogicalOr($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr> {
        return this.choice<logicalOr>([
            () => this.matchlogicalOr_1($$dpth + 1, $$cr),
            () => this.matchlogicalOr_2($$dpth + 1, $$cr),
            () => this.matchlogicalOr_3($$dpth + 1, $$cr),
            () => this.matchlogicalOr_4($$dpth + 1, $$cr),
            () => this.matchlogicalOr_5($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalOr_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr_1> {
        return this.regexAccept(String.raw`(?:OR)`, $$dpth + 1, $$cr);
    }
    public matchlogicalOr_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr_2> {
        return this.regexAccept(String.raw`(?:Or)`, $$dpth + 1, $$cr);
    }
    public matchlogicalOr_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr_3> {
        return this.regexAccept(String.raw`(?:or)`, $$dpth + 1, $$cr);
    }
    public matchlogicalOr_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr_4> {
        return this.regexAccept(String.raw`(?:|)`, $$dpth + 1, $$cr);
    }
    public matchlogicalOr_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalOr_5> {
        return this.regexAccept(String.raw`(?:||)`, $$dpth + 1, $$cr);
    }
    public matchlogicalXor($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalXor> {
        return this.choice<logicalXor>([
            () => this.matchlogicalXor_1($$dpth + 1, $$cr),
            () => this.matchlogicalXor_2($$dpth + 1, $$cr),
            () => this.matchlogicalXor_3($$dpth + 1, $$cr),
            () => this.matchlogicalXor_4($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalXor_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalXor_1> {
        return this.regexAccept(String.raw`(?:XOR)`, $$dpth + 1, $$cr);
    }
    public matchlogicalXor_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalXor_2> {
        return this.regexAccept(String.raw`(?:Xor)`, $$dpth + 1, $$cr);
    }
    public matchlogicalXor_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalXor_3> {
        return this.regexAccept(String.raw`(?:xor)`, $$dpth + 1, $$cr);
    }
    public matchlogicalXor_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalXor_4> {
        return this.regexAccept(String.raw`(?:^)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNand($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand> {
        return this.choice<logicalNand>([
            () => this.matchlogicalNand_1($$dpth + 1, $$cr),
            () => this.matchlogicalNand_2($$dpth + 1, $$cr),
            () => this.matchlogicalNand_3($$dpth + 1, $$cr),
            () => this.matchlogicalNand_4($$dpth + 1, $$cr),
            () => this.matchlogicalNand_5($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalNand_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand_1> {
        return this.regexAccept(String.raw`(?:NAND)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNand_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand_2> {
        return this.regexAccept(String.raw`(?:Nand)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNand_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand_3> {
        return this.regexAccept(String.raw`(?:nand)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNand_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand_4> {
        return this.regexAccept(String.raw`(?:!&)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNand_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNand_5> {
        return this.regexAccept(String.raw`(?:!&&)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNor($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor> {
        return this.choice<logicalNor>([
            () => this.matchlogicalNor_1($$dpth + 1, $$cr),
            () => this.matchlogicalNor_2($$dpth + 1, $$cr),
            () => this.matchlogicalNor_3($$dpth + 1, $$cr),
            () => this.matchlogicalNor_4($$dpth + 1, $$cr),
            () => this.matchlogicalNor_5($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalNor_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor_1> {
        return this.regexAccept(String.raw`(?:NOR)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNor_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor_2> {
        return this.regexAccept(String.raw`(?:Nor)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNor_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor_3> {
        return this.regexAccept(String.raw`(?:nor)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNor_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor_4> {
        return this.regexAccept(String.raw`(?:!|)`, $$dpth + 1, $$cr);
    }
    public matchlogicalNor_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalNor_5> {
        return this.regexAccept(String.raw`(?:!||)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals> {
        return this.choice<logicalEquals>([
            () => this.matchlogicalEquals_1($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_2($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_3($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_4($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_5($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_6($$dpth + 1, $$cr),
            () => this.matchlogicalEquals_7($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalEquals_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_1> {
        return this.regexAccept(String.raw`(?:EQUALS)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_2> {
        return this.regexAccept(String.raw`(?:Equals)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_3> {
        return this.regexAccept(String.raw`(?:equals)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_4> {
        return this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_5> {
        return this.regexAccept(String.raw`(?:==)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_6($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_6> {
        return this.regexAccept(String.raw`(?:<==>)`, $$dpth + 1, $$cr);
    }
    public matchlogicalEquals_7($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalEquals_7> {
        return this.regexAccept(String.raw`(?:<=>)`, $$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator> {
        return this.choice<logicalBinaryOperator>([
            () => this.matchlogicalBinaryOperator_1($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_2($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_3($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_4($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_5($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_6($$dpth + 1, $$cr),
            () => this.matchlogicalBinaryOperator_7($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalBinaryOperator_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_1> {
        return this.matchlogicalImplies($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_2> {
        return this.matchlogicalAnd($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_3> {
        return this.matchlogicalOr($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_4($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_4> {
        return this.matchlogicalXor($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_5($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_5> {
        return this.matchlogicalNand($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_6($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_6> {
        return this.matchlogicalNor($$dpth + 1, $$cr);
    }
    public matchlogicalBinaryOperator_7($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalBinaryOperator_7> {
        return this.matchlogicalEquals($$dpth + 1, $$cr);
    }
    public matchlogicalExpression($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalExpression> {
        return this.choice<logicalExpression>([
            () => this.matchlogicalExpression_1($$dpth + 1, $$cr),
            () => this.matchlogicalExpression_2($$dpth + 1, $$cr),
            () => this.matchlogicalExpression_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalExpression_1($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalExpression_1> {
        return this.runner<logicalExpression_1>($$dpth,
            (log) => {
                if (log) {
                    log("logicalExpression_1");
                }
                let $scope$left: Nullable<logicalData>;
                let $scope$operator: Nullable<logicalBinaryOperator>;
                let $scope$right: Nullable<logicalData>;
                let $$res: Nullable<logicalExpression_1> = null;
                if (true
                    && ($scope$left = this.matchlogicalData($$dpth + 1, $$cr)) !== null
                    && ($scope$operator = this.matchlogicalBinaryOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$right = this.matchlogicalData($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalExpression_1, left: $scope$left, operator: $scope$operator, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalExpression_2($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalExpression_2> {
        return this.runner<logicalExpression_2>($$dpth,
            (log) => {
                if (log) {
                    log("logicalExpression_2");
                }
                let $scope$operator: Nullable<logicalUnaryOperator>;
                let $scope$right: Nullable<logicalData>;
                let $$res: Nullable<logicalExpression_2> = null;
                if (true
                    && ($scope$operator = this.matchlogicalUnaryOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$right = this.matchlogicalData($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalExpression_2, operator: $scope$operator, right: $scope$right};
                }
                return $$res;
            }, $$cr)();
    }
    public matchlogicalExpression_3($$dpth: number, $$cr?: ContextRecorder): Nullable<logicalExpression_3> {
        return this.matchlogicalData($$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchstart(0, rec);
        return new ParseResult(res,
            rec.getErr() ?? new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<start>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<start>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}